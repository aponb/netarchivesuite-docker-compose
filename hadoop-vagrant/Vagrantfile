BOX_IMAGE = 'centos/7'


HADOOP_NET = "10.0.0"
HADOOP_NETWORK = "nah.hadoop"
IPA_ADM_IP = HADOOP_NET + ".9"

required_plugins = %w(vagrant-reload vagrant-sshfs vagrant_reboot_linux)

plugins_to_install = required_plugins.select { |plugin| not Vagrant.has_plugin? plugin }
if not plugins_to_install.empty?
  puts "Installing plugins: #{plugins_to_install.join(' ')}"
  if system "vagrant plugin install #{plugins_to_install.join(' ')}"
    exec "vagrant #{ARGV.join(' ')}"
  else
    abort "Installation of one or more plugins has failed. Aborting."
  end
end

Vagrant.configure("2") do |config|


  config.vm.provider "virtualbox" do |v|
    # v.gui = true
    #This speeds up recreating containers
    v.linked_clone = true

    v.memory = 1028
    v.cpus = 1
  end



  config.vm.provision :shell,
                      inline: "yum update -y",
                      name: "yum update"

  config.vm.synced_folder ".", "/vagrant", type: "rsync", rsync_auto: true


  config.vm.provision :shell,
                      inline: "echo -e 'vagrant123\nvagrant123'|  passwd vagrant",
                      name: "vagrant password set"

  #Vagrant places hostname in /etc/hosts. This cause our scripts to get the wrong IP address. Remove it
  config.vm.provision "shell", inline: "cp /etc/hosts /etc/hosts.orig", name: "backing up /etc/hosts"
  config.vm.provision "shell", inline: "grep localhost /etc/hosts.orig > /etc/hosts", name: "Removing hostname from hosts", run: "always"

  config.vm.provision "shell",
                      name: "Backing up resolv.conf if not done already",
                      inline: "[ -f /etc/resolv.conf.orig ] || cp /etc/resolv.conf /etc/resolv.conf.orig", run: "always"

  config.vm.provision "shell",
                      name: "Appending search domain " + HADOOP_NETWORK + " to /etc/resolv.conf",
                      inline: "grep '^search .*" + HADOOP_NETWORK + ".*$' /etc/resolv.conf || sed -j -E 's/^(search .*)$/\1 " + HADOOP_NETWORK + "/' /etc/resolv.conf", run: "always"

  config.vm.provision "shell",
                      name: "Appending ipa-adm DNS server " + IPA_ADM_IP + " to /etc/resolv.conf",
                      inline: "grep '^nameserver " + IPA_ADM_IP + "$' /etc/resolv.conf || echo 'nameserver " + IPA_ADM_IP + "' >>/etc/resolv.conf", run: "always"


  # They should all run the global bootstrap
  #config.vm.provision "shell", inline: $bootstrap, name: "all/bootstrap.sh"


  # FreeIPA and nfs server
  config.vm.define "nah-adm" do |subconfig|
    subconfig.vm.box = BOX_IMAGE
    subconfig.vm.hostname = "nah-adm." + HADOOP_NETWORK
    subconfig.vm.network :private_network, ip: IPA_ADM_IP
    subconfig.vm.provision :reload

    subconfig.vm.provision :shell, path: "nah-adm/Install_IPA.sh", name: 'Install IPA'
    subconfig.vm.provision :shell, path: "nah-adm/home_server.sh", name: 'Automounts server'
    subconfig.vm.provision :shell, path: "nah-adm/setup_users.sh", name: 'Setup users'


  end

  # DataNodes
  #

  (1..3).each { |j|
    config.vm.define "nah-data-00#{j}" do |subconfig|
      subconfig.vm.box = BOX_IMAGE
      subconfig.vm.hostname = "nah-data-00#{j}.#{HADOOP_NETWORK}"
      subconfig.vm.network :private_network, ip: "#{HADOOP_NET}.1#{j}"

      subconfig.vm.provider "virtualbox" do |v|
        v.memory = 4096
        v.cpus = 2
      end
      subconfig.vm.provision :shell, path: "clients/ipaclient.sh", name: 'IPA client'
      subconfig.vm.provision :shell, path: "clients/ambari_client.sh", name: 'Ambari client'

    end
  }


  # Ambari Server
  config.vm.define "nah-master" do |subconfig|
    subconfig.vm.box = BOX_IMAGE
    subconfig.vm.hostname = "nah-master." + HADOOP_NETWORK
    subconfig.vm.network :private_network, ip: HADOOP_NET + ".113"

    subconfig.vm.provider "virtualbox" do |v|
      v.memory = 4096
      v.cpus = 4
    end

    subconfig.vm.provision :shell, path: "clients/ipaclient.sh", name: 'IPA client'
    subconfig.vm.provision :shell, path: "clients/ambari_client.sh", name: 'Ambari client'

    subconfig.vm.provision :shell, path: "nah-master/postgres.sh", name: 'Postgres database'

    subconfig.vm.provision :shell, path: "nah-master/ambari.sh", name: 'Ambari Server'

    subconfig.vm.provision :shell, path: "nah-master/blueprint.sh", name: 'Blueprints'

    subconfig.vm.provision :shell, path: "nah-master/ssh_access.sh", name: 'Ensure that the master can ssh to the other hosts'

    subconfig.vm.provision :shell, path: "nah-master/kerberos-enable.sh", name: 'Enable kerberos on the cluster'

    # Ambari must own this folder, and it does not do so by default.
    subconfig.vm.provision :shell,
                           inline: "(id ambari-server && chown ambari-server:ambari-server /var/run/ambari-server/ -R) || true",
                           name: "Owning /var/run/ambari-server/",
                           run: "always"
  end



end

